-- DROP DATABASE IF EXISTS websitedb;
-- CREATE DATABASE websitedb;
--
--
-- create table if not exists databasechangeloglock
-- (
--     id integer not null
--         constraint databasechangeloglock_pkey
--             primary key,
--     locked boolean not null,
--     lockgranted timestamp,
--     lockedby varchar(255)
-- );
--
-- alter table databasechangeloglock owner to postgres;
--
-- create table if not exists databasechangelog
-- (
--     id varchar(255) not null,
--     author varchar(255) not null,
--     filename varchar(255) not null,
--     dateexecuted timestamp not null,
--     orderexecuted integer not null,
--     exectype varchar(10) not null,
--     md5sum varchar(35),
--     description varchar(255),
--     comments varchar(255),
--     tag varchar(255),
--     liquibase varchar(20),
--     contexts varchar(255),
--     labels varchar(255),
--     deployment_id varchar(10)
-- );
--
-- alter table databasechangelog owner to postgres;
--
-- create table if not exists roles
-- (
--     id bigint generated by default as identity
--         constraint pk_roles
--             primary key,
--     name varchar(255)
-- );
--
-- alter table roles owner to postgres;
--
-- create table if not exists topics
-- (
--     id bigint generated by default as identity
--         constraint pk_topics
--             primary key,
--     name varchar(255) not null
--         constraint uc_topics_name
--             unique
-- );
--
-- alter table topics owner to postgres;
--
-- create table if not exists users
-- (
--     id bigint generated by default as identity
--         constraint pk_users
--             primary key,
--     status varchar(255),
--     email varchar(255) not null
--         constraint uc_users_email
--             unique,
--     username varchar(255) not null
--         constraint uc_users_username
--             unique,
--     first_name varchar(255) not null,
--     last_name varchar(255) not null,
--     password varchar(255) not null
-- );
--
-- alter table users owner to postgres;
--
-- create table if not exists courses
-- (
--     id bigint generated by default as identity
--         constraint pk_courses
--             primary key,
--     name varchar(255) not null,
--     price integer,
--     user_id bigint
--         constraint fk_courses_on_user
--             references users,
--     rating integer,
--     topic_id bigint
--         constraint fk_courses_on_topic
--             references topics
-- );
--
-- alter table courses owner to postgres;
--
-- create table if not exists feedbacks
-- (
--     id bigint generated by default as identity
--         constraint pk_feedbacks
--             primary key,
--     course_id bigint
--         constraint fk_feedbacks_on_course
--             references courses,
--     user_id bigint
--         constraint fk_feedbacks_on_user
--             references users,
--     detention text,
--     rank integer not null,
--     date date
-- );
--
-- alter table feedbacks owner to postgres;
--
-- create table if not exists groups
-- (
--     id bigint generated by default as identity
--         constraint pk_groups
--             primary key,
--     name varchar(255) not null
--         constraint uc_groups_name
--             unique,
--     course_id bigint
--         constraint fk_groups_on_course
--             references courses,
--     capacity integer not null,
--     available integer not null
-- );
--
-- alter table groups owner to postgres;
--
-- create table if not exists schedules
-- (
--     id bigint generated by default as identity
--         constraint pk_schedules
--             primary key,
--     date timestamp,
--     group_id bigint
--         constraint fk_schedules_on_group
--             references groups
-- );
--
-- alter table schedules owner to postgres;
--
-- create table if not exists theories
-- (
--     id bigint generated by default as identity
--         constraint pk_theories
--             primary key,
--     name varchar(255) not null
--         constraint uc_theories_name
--             unique,
--     description text,
--     topic_id bigint
--         constraint fk_theories_on_topic
--             references topics,
--     user_id bigint
--         constraint fk_theories_on_user
--             references users,
--     date date
-- );
--
-- alter table theories owner to postgres;
--
-- create table if not exists user_group
-- (
--     group_id bigint not null
--         constraint fk_usegro_on_group
--             references groups,
--     user_id bigint not null
--         constraint fk_usegro_on_user
--             references users,
--     constraint pk_user_group
--         primary key (group_id, user_id)
-- );
--
-- alter table user_group owner to postgres;
--
-- create table if not exists user_roles
-- (
--     role_id bigint not null
--         constraint fk_userol_on_role
--             references roles,
--     user_id bigint not null
--         constraint fk_userol_on_user
--             references users,
--     constraint pk_user_roles
--         primary key (role_id, user_id)
-- );
--
-- alter table user_roles owner to postgres;
--
--
--
-- insert into topics(name)
-- values ('Java');
-- insert into topics(name)
-- values ('Python');
-- insert into topics(name)
-- values ('C');
--
-- insert into roles(id, name)
-- values (1, 'ROLE_ADMIN');
-- insert into roles(id, name)
-- values (2, 'ROLE_USER');
--
-- insert into users(email, status, username, first_name, last_name, password)
-- values ('admin@gmail.com', 'ACTIVE', 'admin', 'admin', 'admin',
--         '$2a$12$YmW0eg2h2y74OtXm.7VukevsJsE1mPtBfuksj9UFIrh15qRWjODru');
-- insert into users(email, status, username, first_name, last_name, password)
-- values ('user@gmail.com', 'ACTIVE', 'user', 'user', 'user',
--         '$2a$12$MQMlMECTRojxzv.duTmb.ed4PJxBrTffRBh5izhzDpcglfb.ltb0a');
-- insert into users(email, status, username, first_name, last_name, password)
-- values ('irina@gmail.com', 'ACTIVE', 'irina', 'irina', 'irina',
--         '$2a$12$ijU.Va/oZ9lBFuQoM5rTXubbV.xe4rKzgly4NRlfxgM0zLYlZO4/m');
-- insert into users(email, status, username, first_name, last_name, password)
-- values ('mark@gmail.com', 'ACTIVE', 'mark', 'mark', 'mark',
--         '$2a$12$RAzJEanGBS5y7xVsTp24OuRpzxkD5kHQ2JX5aCI.vAgLkpWw46aVe');
-- insert into users(email, status, username, first_name, last_name, password)
-- values ('lydia@gmail.com', 'ACTIVE', 'lydia', 'lydia', 'lydia',
--         '$2a$12$lJo7YtSoUGGK3tq7UQPqVexsiZnlsbjWyZwOy/z7APvhhjZvFrnwy');
-- insert into users(email, status, username, first_name, last_name, password)
-- values ('alex@gmail.com', 'ACTIVE', 'alex', 'alex', 'alex',
--         '$2a$12$9gdWSWLsO0yrnmlfQfz7/.wuAeoBJW6Z7/arHmSNh9zpMH8j1HLWm');
--
-- insert into user_roles(user_id, role_id)
-- values (1, 1);
-- insert into user_roles(user_id, role_id)
-- values (1, 2);
-- insert into user_roles(user_id, role_id)
-- values (2, 2);
-- insert into user_roles(user_id, role_id)
-- values (3, 2);
-- insert into user_roles(user_id, role_id)
-- values (4, 2);
-- insert into user_roles(user_id, role_id)
-- values (5, 2);
-- insert into user_roles(user_id, role_id)
-- values (6, 2);
--
-- insert into courses(name, price, rating, user_id, topic_id)
-- values ('java pro', '100', 4, '1', '1');
-- insert into courses(name, price, rating, user_id, topic_id)
-- values ('java beginner', '0', 5, '2', '1');
-- insert into courses(name, price, rating, user_id, topic_id)
-- values ('python pro', '80', 3, '3', '1');
-- insert into courses(name, price, rating, user_id, topic_id)
-- values ('python beginner', '0', 5, '2', '2');
-- insert into courses(name, price, rating, user_id, topic_id)
-- values ('c pro', '90', 2, '1', '3');
-- insert into courses(name, price, rating, user_id, topic_id)
-- values ('c beginner', '0', 5, '2', '3');
--
-- insert into groups(name, course_id, capacity, available)
-- values ('1_group', '1', '10', '4');
-- insert into groups(name, course_id, capacity, available)
-- values ('2_group', '2', '5', '0');
-- insert into groups(name, course_id, capacity, available)
-- values ('3_group', '2', '5', '3');
-- insert into groups(name, course_id, capacity, available)
-- values ('4_group', '3', '5', '1');
-- insert into groups(name, course_id, capacity, available)
-- values ('5_group', '4', '5', '3');
-- insert into groups(name, course_id, capacity, available)
-- values ('6_group', '4', '1', '0');
-- insert into groups(name, course_id, capacity, available)
-- values ('7_group', '5', '1', '1');
-- insert into groups(name, course_id, capacity, available)
-- values ('8_group', '6', '1', '1');
--
-- insert into schedules(date, group_id)
-- values ('2022-01-21 11:00:00', '1');
-- insert into schedules(date, group_id)
-- values ('2022-01-22 14:00:00', '2');
-- insert into schedules(date, group_id)
-- values ('2022-01-21 15:00:00', '3');
-- insert into schedules(date, group_id)
-- values ('2022-01-21 16:00:00', '3');
-- insert into schedules(date, group_id)
-- values ('2022-01-21 17:00:00', '4');
-- insert into schedules(date, group_id)
-- values ('2022-01-21 18:00:00', '4');
-- insert into schedules(date, group_id)
-- values ('2022-01-21 19:00:00', '5');
-- insert into schedules(date, group_id)
-- values ('2022-01-21 10:00:00', '6');
-- insert into schedules(date, group_id)
-- values ('2022-01-21 11:00:00', '7');
-- insert into schedules(date, group_id)
-- values ('2022-01-21 12:00:00', '8');
-- insert into schedules(date, group_id)
-- values ('2022-01-21 13:00:00', '8');
--
-- insert into feedbacks(course_id, user_id, detention, rank, date)
-- values ('1', '2', 'some feedback', '5', '2022-01-01');
-- insert into feedbacks(course_id, user_id, detention, rank, date)
-- values ('1', '3', 'some feedback', '3', '2022-01-06');
-- insert into feedbacks(course_id, user_id, detention, rank, date)
-- values ('2', '5', 'some feedback', '5', '2022-01-05');
-- insert into feedbacks(course_id, user_id, detention, rank, date)
-- values ('3', '4', 'some feedback', '3', '2022-01-04');
-- insert into feedbacks(course_id, user_id, detention, rank, date)
-- values ('4', '2', 'some feedback', '5', '2022-01-04');
-- insert into feedbacks(course_id, user_id, detention, rank, date)
-- values ('5', '3', 'some feedback', '2', '2022-01-03');
-- insert into feedbacks(course_id, user_id, detention, rank, date)
-- values ('6', '1', 'some feedback', '5', '2022-01-02');
--
-- insert into user_group(group_id, user_id)
-- values (1, 2);
-- insert into user_group(group_id, user_id)
-- values (1, 3);
-- insert into user_group(group_id, user_id)
-- values (1, 4);
-- insert into user_group(group_id, user_id)
-- values (1, 5);
-- insert into user_group(group_id, user_id)
-- values (1, 6);
-- insert into user_group(group_id, user_id)
-- values (1, 1);
-- insert into user_group(group_id, user_id)
-- values (2, 3);
-- insert into user_group(group_id, user_id)
-- values (2, 1);
-- insert into user_group(group_id, user_id)
-- values (2, 4);
-- insert into user_group(group_id, user_id)
-- values (2, 2);
-- insert into user_group(group_id, user_id)
-- values (2, 6);
-- insert into user_group(group_id, user_id)
-- values (3, 1);
-- insert into user_group(group_id, user_id)
-- values (3, 2);
-- insert into user_group(group_id, user_id)
-- values (4, 3);
-- insert into user_group(group_id, user_id)
-- values (4, 4);
-- insert into user_group(group_id, user_id)
-- values (4, 5);
-- insert into user_group(group_id, user_id)
-- values (4, 2);
-- insert into user_group(group_id, user_id)
-- values (5, 2);
-- insert into user_group(group_id, user_id)
-- values (5, 3);
-- insert into user_group(group_id, user_id)
-- values (6, 2);
--
-- insert into theories(name, description, topic_id, user_id, date)
-- values ('funny java', 'some about java', '1', '1', '2022-01-03');
-- insert into theories(name, description, topic_id, user_id, date)
-- values ('pro java', 'some about pro java', '1', '2', '2022-01-02');
-- insert into theories(name, description, topic_id, user_id, date)
-- values ('funny python', 'some about python', '2', '3', '2022-01-05');
-- insert into theories(name, description, topic_id, user_id, date)
-- values ('funny c', 'some about c', '3', '1', '2022-01-04');
